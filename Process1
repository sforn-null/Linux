进程
fork - 创建子进程
头文件是unistd
pid - 进程本身（子进程）
getpid() - 得到子进程
ppid - 父进程
getppid() - 得到父进程
1.如何理解进程创建（fork）？
创建进程，是系统多了一个进程，多了一个进程，
多了一个进程系统就要多一组管理进程的数据结构+该进程对应的代码和数据

2.fork为什么会有两个返回值？如何深刻的理解呢？？
fork是函数么？是
pid_t  fork()
{
//创建子进程的逻辑
//给子进程创建tast_stuck
Struct  tast_stuck *ts = new stuck tast_stuck()
ts.xx = father.xx;
...
ts.status = running;
ts.link = task_queue;
//创建子进程的任务完了没？
//完了
return id;  // ruturn也是语句，父进程要执行，子进程也要执行
//因此返回的是两个值
}

3.fork父子只能够顺序和数据复制问题--初识
进程数据 = 代码+数据
父进程创建子进程的时候，代码是共享的，数据是各自私有一份（写时拷贝）
代码是逻辑，一般是不可被修改的。
数据，是即可读又可写的
进程是具有独立性的！！
父子进程fork完毕，谁先运行是不确定的！！这个取决于调度器！

4.为何给父进程返回子进程pid，给子进程返回0
5.是R状态的进程，一定在CPU上面跑吗？？（曾经是个面试题）
不一定！！R的含义是可以直接被调度，R是在运行队列的进程


操作系统讲的理论都是总结性的
具体操作系统实现的理论可能会有所不同
